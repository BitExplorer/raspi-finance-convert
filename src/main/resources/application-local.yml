server:
  port: ${SERVER_PORT}
  ssl:
    key-store: ${SSL_KEYSTORE}
    key-store-password: ${KEYSTORE_PASSWORD}
    key-password: ${KEY_PASSWORD}

spring:
  application:
    name: raspi-finance-convert
  profiles:
    active: local
  jackson:
    property-naming-strategy: SNAKE_CASE
    default-property-inclusion: non_null

  datasource:
    url: jdbc:h2:mem:finance_db;DB_CLOSE_DELAY=-1
    username: sa
    password:
    driver-class-name: org.h2.Driver
    # testWhileIdle to persist the connection when idle for a long period of time
    tomcat:
      validation-query: SELECT 1
      test-while-idle: true
    platform: h2
    continue-on-error: false
    schema: classpath:schema-h2.sql
    data: classpath:data-h2.sql
    # enable flag to always if you want to utilize data.sql and schema.sql
    initialization-mode: always
  thymeleaf:
    cache: false
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
  jpa:
    show-sql: true
    open-in-view: false
    generate-ddl: true
    hibernate:
      ddl-auto: ${HIBERNATE_DDL}
    properties:
      hibernate:
        jdbc:
          time_zone: UTC

logging:
  level:
    org:
      hibernate:
        SQL: WARN
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
  file:
    name: ${LOGS}/hibernate.log

#spring.jpa.hibernate.ddl-auto: none
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#none is build from schema.sql (no Java classes)
#update only add new tables in the schema.sql (starting from Java classes)

# ===============================
# = Custom Application Config
# ===============================

custom:
  project:
    time-zone: ${TIMEZONE}
    input:
      file-path: ${INPUT_FILEPATH}
    output:
      file-path: ${OUTPUT_FILEPATH}
    excel-password: ${EXCEL_PASSWORD}
    camel-route:
      auto-Start-Route: ${CAMEL_ROUTE_ENABLED}
      json-Files-Input-Path: ${JSON_FILES_INPUT_PATH}
      excel-Files-Input-Path: ${EXCEL_FILES_INPUT_PATH}
      json-File-Reader-Route-Id: jsonFileReaderRoute
      excel-File-Reader-Route-Id: excelFileReaderRoute
      transaction-To-Database-Route-Id: transactionToDatabaseRoute
      json-File-Writer-Route-Id: jsonFileWriterRoute
      process-each-transaction: direct:processEachTransaction
      json-file-writer-route: direct:jsonFileWriterRoute

# ===============================
# = Camel
# ===============================
camel:
  springboot:
    name: raspi-finance-convert
  health.check.routes.enabled: false

#kebab-case '-' separated

management:
  endpoint:
    health:
      show-details: always
